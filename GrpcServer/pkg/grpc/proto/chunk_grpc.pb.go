// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: proto/chunk.proto

package ChunkPb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ChunkClient is the client API for Chunk service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChunkClient interface {
	Send(ctx context.Context, in *ChunkRequest, opts ...grpc.CallOption) (*ChunkResponse, error)
}

type chunkClient struct {
	cc grpc.ClientConnInterface
}

func NewChunkClient(cc grpc.ClientConnInterface) ChunkClient {
	return &chunkClient{cc}
}

func (c *chunkClient) Send(ctx context.Context, in *ChunkRequest, opts ...grpc.CallOption) (*ChunkResponse, error) {
	out := new(ChunkResponse)
	err := c.cc.Invoke(ctx, "/grpcServer.Chunk/send", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChunkServer is the server API for Chunk service.
// All implementations must embed UnimplementedChunkServer
// for forward compatibility
type ChunkServer interface {
	Send(context.Context, *ChunkRequest) (*ChunkResponse, error)
	mustEmbedUnimplementedChunkServer()
}

// UnimplementedChunkServer must be embedded to have forward compatible implementations.
type UnimplementedChunkServer struct {
}

func (UnimplementedChunkServer) Send(context.Context, *ChunkRequest) (*ChunkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Send not implemented")
}
func (UnimplementedChunkServer) mustEmbedUnimplementedChunkServer() {}

// UnsafeChunkServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChunkServer will
// result in compilation errors.
type UnsafeChunkServer interface {
	mustEmbedUnimplementedChunkServer()
}

func RegisterChunkServer(s grpc.ServiceRegistrar, srv ChunkServer) {
	s.RegisterService(&Chunk_ServiceDesc, srv)
}

func _Chunk_Send_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChunkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChunkServer).Send(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpcServer.Chunk/send",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChunkServer).Send(ctx, req.(*ChunkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Chunk_ServiceDesc is the grpc.ServiceDesc for Chunk service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Chunk_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpcServer.Chunk",
	HandlerType: (*ChunkServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "send",
			Handler:    _Chunk_Send_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/chunk.proto",
}
